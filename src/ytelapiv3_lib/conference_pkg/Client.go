/*
 * ytelapiv3_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package conference_pkg


import(
	"fmt"
	"ytelapiv3_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"ytelapiv3_lib/apihelper_pkg"
	"ytelapiv3_lib/configuration_pkg"
)
/*
 * Client structure as interface implementation
 */
type CONFERENCE_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * Play an audio file during a conference.
 * @param    string                         conferenceSid      parameter: Required
 * @param    string                         participantSid     parameter: Required
 * @param    models_pkg.AudioUrlEnum        audioUrl           parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreatePlayAudio (
            conferenceSid string,
            participantSid string,
            audioUrl models_pkg.AudioUrlEnum) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/playAudio.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,
        "ParticipantSid" : participantSid,
        "AudioUrl" : models_pkg.AudioUrlEnumToValue(audioUrl),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Remove a participant from a conference.
 * @param    string        participantSid     parameter: Required
 * @param    string        conferenceSid      parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateHangupParticipant (
            participantSid string,
            conferenceSid string) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/hangupParticipant.json"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "ParticipantSid" : participantSid,
    })
    if err != nil {
        //error in query param handling
        return "", err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Retrieve information about a conference by its ConferenceSid.
 * @param    string        conferenceSid     parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateViewConference (
            conferenceSid string) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/viewconference.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Retrieve information about a participant by its ParticipantSid.
 * @param    string        conferenceSid      parameter: Required
 * @param    string        participantSid     parameter: Required
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateViewParticipant (
            conferenceSid string,
            participantSid string) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/viewParticipant.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,
        "ParticipantSid" : participantSid,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Deaf Mute Participant
 * @param    string        conferenceSid      parameter: Required
 * @param    string        participantSid     parameter: Required
 * @param    *bool         muted              parameter: Optional
 * @param    *bool         deaf               parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateSilenceParticipant (
            conferenceSid string,
            participantSid string,
            muted *bool,
            deaf *bool) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/deafMuteParticipant.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "conferenceSid" : conferenceSid,
        "ParticipantSid" : participantSid,
        "Muted" : muted,
        "Deaf" : deaf,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Add Participant in conference 
 * @param    string        conferenceSid         parameter: Required
 * @param    string        participantNumber     parameter: Required
 * @param    *bool         muted                 parameter: Optional
 * @param    *bool         deaf                  parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) AddParticipant (
            conferenceSid string,
            participantNumber string,
            muted *bool,
            deaf *bool) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/addParticipant.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,
        "ParticipantNumber" : participantNumber,
        "Muted" : muted,
        "Deaf" : deaf,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Here you can experiment with initiating a conference call through Ytel and view the request response generated when doing so.
 * @param    string         url                      parameter: Required
 * @param    string         from                     parameter: Required
 * @param    string         to                       parameter: Required
 * @param    *string        method                   parameter: Optional
 * @param    *string        statusCallBackUrl        parameter: Optional
 * @param    *string        statusCallBackMethod     parameter: Optional
 * @param    *string        fallbackUrl              parameter: Optional
 * @param    *string        fallbackMethod           parameter: Optional
 * @param    *bool          record                   parameter: Optional
 * @param    *string        recordCallBackUrl        parameter: Optional
 * @param    *string        recordCallBackMethod     parameter: Optional
 * @param    *string        scheduleTime             parameter: Optional
 * @param    *int64         timeout                  parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateConference (
            url string,
            from string,
            to string,
            method *string,
            statusCallBackUrl *string,
            statusCallBackMethod *string,
            fallbackUrl *string,
            fallbackMethod *string,
            record *bool,
            recordCallBackUrl *string,
            recordCallBackMethod *string,
            scheduleTime *string,
            timeout *int64) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/createConference.json"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "Url" : url,
    })
    if err != nil {
        //error in query param handling
        return "", err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "From" : from,
        "To" : to,
        "Method" : method,
        "StatusCallBackUrl" : statusCallBackUrl,
        "StatusCallBackMethod" : statusCallBackMethod,
        "FallbackUrl" : fallbackUrl,
        "FallbackMethod" : fallbackMethod,
        "Record" : record,
        "RecordCallBackUrl" : recordCallBackUrl,
        "RecordCallBackMethod" : recordCallBackMethod,
        "ScheduleTime" : scheduleTime,
        "Timeout" : timeout,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Retrieve a list of participants for an in-progress conference.
 * @param    string        conferenceSid     parameter: Required
 * @param    *int64        page              parameter: Optional
 * @param    *int64        pagesize          parameter: Optional
 * @param    *bool         muted             parameter: Optional
 * @param    *bool         deaf              parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateListParticipants (
            conferenceSid string,
            page *int64,
            pagesize *int64,
            muted *bool,
            deaf *bool) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/listParticipant.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "ConferenceSid" : conferenceSid,
        "Page" : page,
        "Pagesize" : pagesize,
        "Muted" : muted,
        "Deaf" : deaf,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Retrieve a list of conference objects.
 * @param    *int64         page             parameter: Optional
 * @param    *int64         pagesize         parameter: Optional
 * @param    *string        friendlyName     parameter: Optional
 * @param    *string        dateCreated      parameter: Optional
 * @return	Returns the string response from the API call
 */
func (me *CONFERENCE_IMPL) CreateListConferences (
            page *int64,
            pagesize *int64,
            friendlyName *string,
            dateCreated *string) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/conferences/listconference.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "page" : page,
        "pagesize" : pagesize,
        "FriendlyName" : friendlyName,
        "DateCreated" : dateCreated,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

