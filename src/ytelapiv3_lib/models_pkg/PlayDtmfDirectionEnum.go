/*
 * ytelapiv3_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for PlayDtmfDirectionEnum enum
 */
type PlayDtmfDirectionEnum int

/**
 * Value collection for PlayDtmfDirectionEnum enum
 */
const (
    PlayDtmfDirection_IN PlayDtmfDirectionEnum = 1 + iota
    PlayDtmfDirection_OUT
    PlayDtmfDirection_BOTH
)

func (r PlayDtmfDirectionEnum) MarshalJSON() ([]byte, error) { 
    s := PlayDtmfDirectionEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *PlayDtmfDirectionEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  PlayDtmfDirectionEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts PlayDtmfDirectionEnum to its string representation
 */
func PlayDtmfDirectionEnumToValue(playDtmfDirectionEnum PlayDtmfDirectionEnum) string {
    switch playDtmfDirectionEnum {
        case PlayDtmfDirection_IN:
    		return "in"		
        case PlayDtmfDirection_OUT:
    		return "out"		
        case PlayDtmfDirection_BOTH:
    		return "both"		
        default:
        	return "in"
    }
}

/**
 * Converts PlayDtmfDirectionEnum Array to its string Array representation
*/
func PlayDtmfDirectionEnumArrayToValue(playDtmfDirectionEnum []PlayDtmfDirectionEnum) []string {
    convArray := make([]string,len( playDtmfDirectionEnum))
    for i:=0; i<len(playDtmfDirectionEnum);i++ {
        convArray[i] = PlayDtmfDirectionEnumToValue(playDtmfDirectionEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func PlayDtmfDirectionEnumFromValue(value string) PlayDtmfDirectionEnum {
    switch value {
        case "in":
            return PlayDtmfDirection_IN
        case "out":
            return PlayDtmfDirection_OUT
        case "both":
            return PlayDtmfDirection_BOTH
        default:
            return PlayDtmfDirection_IN
    }
}
