/*
 * ytelapiv3_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for IfMachine32Enum enum
 */
type IfMachine32Enum int

/**
 * Value collection for IfMachine32Enum enum
 */
const (
    IfMachine32_CONTINUE IfMachine32Enum = 1 + iota
    IfMachine32_HANGUP
)

func (r IfMachine32Enum) MarshalJSON() ([]byte, error) { 
    s := IfMachine32EnumToValue(r)
    return json.Marshal(s) 
} 

func (r *IfMachine32Enum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  IfMachine32EnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts IfMachine32Enum to its string representation
 */
func IfMachine32EnumToValue(ifMachine32Enum IfMachine32Enum) string {
    switch ifMachine32Enum {
        case IfMachine32_CONTINUE:
    		return "CONTINUE"		
        case IfMachine32_HANGUP:
    		return "HANGUP"		
        default:
        	return "CONTINUE"
    }
}

/**
 * Converts IfMachine32Enum Array to its string Array representation
*/
func IfMachine32EnumArrayToValue(ifMachine32Enum []IfMachine32Enum) []string {
    convArray := make([]string,len( ifMachine32Enum))
    for i:=0; i<len(ifMachine32Enum);i++ {
        convArray[i] = IfMachine32EnumToValue(ifMachine32Enum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func IfMachine32EnumFromValue(value string) IfMachine32Enum {
    switch value {
        case "CONTINUE":
            return IfMachine32_CONTINUE
        case "HANGUP":
            return IfMachine32_HANGUP
        default:
            return IfMachine32_CONTINUE
    }
}
