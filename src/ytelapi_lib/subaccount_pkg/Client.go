/*
 * ytelapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

package subaccount_pkg


import(
	"fmt"
	"ytelapi_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"ytelapi_lib/apihelper_pkg"
	"ytelapi_lib/configuration_pkg"
)

/*
 * Input structure for the method CreateUserSubaccountactivation
 */
type CreateUserSubaccountactivationInput struct {
    SubAccountSID   string          //The SubaccountSid to be activated or suspended
    MActivate       models_pkg.MActivateEnum //0 to suspend or 1 to activate
}

/*
 * Input structure for the method CreateUserDeletesubaccount
 */
type CreateUserDeletesubaccountInput struct {
    SubAccountSID   string          //The SubaccountSid to be deleted
    MergeNumber     models_pkg.MergeNumberEnum //0 to delete or 1 to merge numbers to parent account.
}

/*
 * Input structure for the method CreateUserCreatesubaccount
 */
type CreateUserCreatesubaccountInput struct {
    FirstName       string          //Sub account user first name
    LastName        string          //sub account user last name
    Email           string          //Sub account email address
    FriendlyName    string          //Descriptive name of the sub account
    Password        string          //The password of the sub account.  Please make sure to make as password that is at least 8 characters long, contain a symbol, uppercase and a number.
}

/*
 * Client structure as interface implementation
 */
type SUBACCOUNT_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * Suspend or unsuspend
 * @param  CreateUserSubaccountactivationInput     Structure with all inputs
 * @return	Returns the string response from the API call
 */
func (me *SUBACCOUNT_IMPL) CreateUserSubaccountactivation (input *CreateUserSubaccountactivationInput) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/user/subaccountactivation.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "SubAccountSID" : input.SubAccountSID,
        "mActivate" : models_pkg.MActivateEnumToValue(input.MActivate),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Delete sub account or merge numbers into parent
 * @param  CreateUserDeletesubaccountInput     Structure with all inputs
 * @return	Returns the string response from the API call
 */
func (me *SUBACCOUNT_IMPL) CreateUserDeletesubaccount (input *CreateUserDeletesubaccountInput) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/user/deletesubaccount.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "SubAccountSID" : input.SubAccountSID,
        "MergeNumber" : models_pkg.MergeNumberEnumToValue(input.MergeNumber),

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

/**
 * Create a sub user account under the parent account
 * @param  CreateUserCreatesubaccountInput     Structure with all inputs
 * @return	Returns the string response from the API call
 */
func (me *SUBACCOUNT_IMPL) CreateUserCreatesubaccount (input *CreateUserCreatesubaccountInput) (string, error) {
        //the base uri for api requests
    _queryBuilder := configuration_pkg.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/user/createsubaccount.json"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return "", err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "FirstName" : input.FirstName,
        "LastName" : input.LastName,
        "Email" : input.Email,
        "FriendlyName" : input.FriendlyName,
        "Password" : input.Password,

    }


    //prepare API request
    _request := unirest.PostWithAuth(_queryBuilder, headers, parameters, me.config.BasicAuthUserName(), me.config.BasicAuthPassword())
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return "", err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return "", err
    }

    //returning the response
    return _response.Body, nil

}

